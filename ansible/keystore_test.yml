---
- hosts: lukes-desktop
  become: false
  tasks:
    - name: Install Java_Cert module to localhost
      fetch:
        src: C:\Users\lukep\projects\ansible\lib\ansible\modules\system\java_cert.py
        dest: /home/lukepafford/IT/git/ansible2/modules/
        flat: yes
      
- hosts: 127.0.0.1
  vars:
    keystoreDir: /home/lukepafford/keystore_test
    pkcs12Password: changeit
  tasks:
    - name: Create the keystore directory
      file:
        path: '{{ keystoreDir }}'
        state: directory
        
    - name: Generate the self signed cert used as a place holder to create the java keystore
      command: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj '/CN=localhost'
      args:
        chdir: '{{ keystoreDir }}'
        creates: cert.pem

    - name: Create the test keystore
      java_keystore:
        name: placeholder
        dest: '{{ keystoreDir }}/keystore.jks'
        password: changeit
        private_key: "{{ lookup('file', '{{ keystoreDir }}/key.pem') }}"
        certificate: "{{ lookup('file', '{{ keystoreDir }}/cert.pem') }}"

    - name: Generate the self signed cert we will use for testing
      command: openssl req -x509 -newkey rsa:4096 -keyout key2.pem -out cert2.pem -days 365 -nodes -subj '/CN=localhost'
      args:
        chdir: '{{ keystoreDir }}'

    - name:  |
        Import the newly created certificate. This is our main test.
        If the java_cert has been updated properly, then this task will report changed each time 
        since the module will be comparing the hash of the certificate instead of validating that the alias
        simply exists
      java_cert:
        cert_alias: test_cert
        cert_path: '{{ keystoreDir }}/cert2.pem'
        keystore_path: '{{ keystoreDir }}/keystore.jks'
        keystore_pass: changeit
        state: present

    - name: Create the pkcs12 archive from the test x509 cert
      command: >
          openssl pkcs12
          -in {{ keystoreDir }}/cert.pem
          -inkey {{ keystoreDir }}/key.pem
          -export
          -name test_pkcs12_cert
          -out {{ keystoreDir }}/cert.pkcs12
          -passout pass:"{{ pkcs12Password }}"

    - name: Create the pkcs12 archive from the certificate we will be trying to add to the keystore
      command: >
          openssl pkcs12
          -in {{ keystoreDir }}/cert2.pem
          -inkey {{ keystoreDir }}/key2.pem
          -export
          -name test_pkcs12_cert
          -out {{ keystoreDir }}/cert2.pkcs12
          -passout pass:"{{ pkcs12Password }}"

    - name: >
        Ensure the original pkcs12 cert is in the keystore
      java_cert:
        cert_alias: test_pkcs12_cert
        pkcs12_alias:  test_pkcs12_cert
        pkcs12_path:  '{{ keystoreDir }}/cert.pkcs12'
        pkcs12_password:  '{{ pkcs12Password }}'
        keystore_path:  '{{ keystoreDir }}/keystore.jks'
        keystore_pass:  changeit
        state: present

    - name: | 
        Perform the same test, but we will now be testing the pkcs12 functionality
        If we add a different pkcs12 cert with the same alias, we should have a chnaged result, NOT the same
      java_cert:
        cert_alias: test_pkcs12_cert
        pkcs12_alias:  test_pkcs12_cert
        pkcs12_path:  '{{ keystoreDir }}/cert2.pkcs12'
        pkcs12_password:  '{{ pkcs12Password }}'
        keystore_path:  '{{ keystoreDir }}/keystore.jks'
        keystore_pass:  changeit
        state:  present